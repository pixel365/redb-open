syntax = "proto3";

package redbco.redbopen.mesh.v1;

option go_package = "github.com/redbco/redb-open/api/proto/mesh/v1;meshv1";

// MeshService provides the core mesh networking functionality
service MeshService {
  // SendMessage sends a message to another node in the mesh
  rpc SendMessage(SendMessageRequest) returns (SendMessageResponse);
  
  // GetNodeStatus returns the current status of the node
  rpc GetNodeStatus(GetNodeStatusRequest) returns (GetNodeStatusResponse);
}

// ManagementService provides administrative functionality for the mesh network
service ManagementService {
    // SeedMesh initializes a new mesh network
    rpc SeedMesh(SeedMeshRequest) returns (SeedMeshResponse);
    
    // JoinMesh allows a node to join an existing mesh network
    rpc JoinMesh(JoinMeshRequest) returns (JoinMeshResponse);
    
    // AddConnection adds a new connection to another node
    rpc AddConnection(AddConnectionRequest) returns (AddConnectionResponse);
    
    // RemoveConnection removes a connection to another node
    rpc RemoveConnection(RemoveConnectionRequest) returns (RemoveConnectionResponse);
    
    // ListConnections returns all current connections
    rpc ListConnections(ListConnectionsRequest) returns (ListConnectionsResponse);
  }

  // ConsensusService provides consensus-related functionality
service ConsensusService {
    // CreateGroup creates a new consensus group
    rpc CreateGroup(CreateGroupRequest) returns (CreateGroupResponse);
    
    // JoinGroup allows a node to join a consensus group
    rpc JoinGroup(JoinGroupRequest) returns (JoinGroupResponse);
    
    // LeaveGroup allows a node to leave a consensus group
    rpc LeaveGroup(LeaveGroupRequest) returns (LeaveGroupResponse);
    
    // GetGroupStatus returns the current status of a consensus group
    rpc GetGroupStatus(GetGroupStatusRequest) returns (GetGroupStatusResponse);
  }

// SendMessageRequest represents a request to send a message
message SendMessageRequest {
  string from_node_id = 1;
  string to_node_id = 2;
  string message_type = 3;
  bytes content = 4;
  map<string, string> metadata = 5;
}

// SendMessageResponse represents the response to a send message request
message SendMessageResponse {
  string message_id = 1;
  bool success = 2;
  string error = 3;
}

// GetNodeStatusRequest represents a request for node status
message GetNodeStatusRequest {}

// GetNodeStatusResponse represents the current status of a node
message GetNodeStatusResponse {
  string node_id = 1;
  string mesh_id = 2;
  repeated string connected_nodes = 3;
  NodeState state = 4;
}

// NodeState represents the current state of a node
enum NodeState {
  NODE_STATE_UNSPECIFIED = 0;
  NODE_STATE_STARTING = 1;
  NODE_STATE_RUNNING = 2;
  NODE_STATE_DEGRADED = 3;
  NODE_STATE_STOPPING = 4;
  NODE_STATE_STOPPED = 5;
} 

// SeedMeshRequest represents a request to initialize a new mesh network
message SeedMeshRequest {
  string mesh_id = 1;
  string node_id = 2;
  map<string, string> config = 3;
}
  
// SeedMeshResponse represents the response to a seed mesh request
message SeedMeshResponse {
  bool success = 1;
  string error = 2;
  string token = 3;
}
  
// JoinMeshRequest represents a request to join a mesh network
message JoinMeshRequest {
  string mesh_id = 1;
  string node_id = 2;
  string token = 3;
  repeated string peer_addresses = 4;
}
  
// JoinMeshResponse represents the response to a join mesh request
message JoinMeshResponse {
  bool success = 1;
  string error = 2;
}
  
// AddConnectionRequest represents a request to add a connection
message AddConnectionRequest {
  string peer_id = 1;
  string address = 2;
}
  
// AddConnectionResponse represents the response to an add connection request
message AddConnectionResponse {
  bool success = 1;
  string error = 2;
}
  
// RemoveConnectionRequest represents a request to remove a connection
message RemoveConnectionRequest {
  string peer_id = 1;
}

// RemoveConnectionResponse represents the response to a remove connection request
message RemoveConnectionResponse {
  bool success = 1;
  string error = 2;
}

// ListConnectionsRequest represents a request to list connections
message ListConnectionsRequest {}

// ListConnectionsResponse represents the response to a list connections request
message ListConnectionsResponse {
  repeated Connection connections = 1;
}

// Connection represents a connection to another node
message Connection {
  string peer_id = 1;
  string address = 2;
  string status = 3;
  int64 last_seen = 4;
} 

// CreateGroupRequest represents a request to create a consensus group
message CreateGroupRequest {
  string group_id = 1;
  repeated string initial_members = 2;
  map<string, string> config = 3;
}

// CreateGroupResponse represents the response to a create group request
message CreateGroupResponse {
  bool success = 1;
  string error = 2;
}

// JoinGroupRequest represents a request to join a consensus group
message JoinGroupRequest {
  string group_id = 1;
  string node_id = 2;
}

// JoinGroupResponse represents the response to a join group request
message JoinGroupResponse {
  bool success = 1;
  string error = 2;
}

// LeaveGroupRequest represents a request to leave a consensus group
message LeaveGroupRequest {
  string group_id = 1;
  string node_id = 2;
}

// LeaveGroupResponse represents the response to a leave group request
message LeaveGroupResponse {
  bool success = 1;
  string error = 2;
}

// GetGroupStatusRequest represents a request for group status
message GetGroupStatusRequest {
  string group_id = 1;
}

// GetGroupStatusResponse represents the current status of a consensus group
message GetGroupStatusResponse {
  string group_id = 1;
  string leader_id = 2;
  repeated string members = 3;
  GroupState state = 4;
  int64 term = 5;
}

// GroupState represents the current state of a consensus group
enum GroupState {
  GROUP_STATE_UNSPECIFIED = 0;
  GROUP_STATE_FORMING = 1;
  GROUP_STATE_ACTIVE = 2;
  GROUP_STATE_DEGRADED = 3;
  GROUP_STATE_DISBANDED = 4;
} 
name: Branch Protection Checks

# Phase 1: Single Maintainer Governance
# This workflow implements basic protection rules suitable for a single maintainer project.
# As the community grows, these rules will be enhanced in future phases.
# See CONTRIBUTING.md for governance evolution plan.

on:
  pull_request:
    branches: [ main, develop, release/*, hotfix/* ]
  push:
    branches: [ main, develop, release/*, hotfix/* ]

jobs:
  # Basic security checks (Phase 1 level)
  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: go
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Basic dependency security
  dependency-check:
    name: Dependency Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      - name: Run govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

  # Basic code quality checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          args: --timeout=5m

      - name: Run go vet
        run: go vet ./...

      - name: Check formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "Code is not formatted. Please run 'go fmt ./...'"
            exit 1
          fi

  # Protocol Buffer validation
  proto-validation:
    name: Protocol Buffer Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install protoc
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler

      - name: Validate Protocol Buffer files
        run: |
          find api/proto -name "*.proto" -exec protoc --proto_path=api/proto --descriptor_set_out=/dev/null {} \;

  # Basic documentation checks
  docs-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate documentation structure
        run: |
          # Check if required documentation files exist
          required_files=("README.md" "CONTRIBUTING.md" "LICENSE")
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "Required documentation file $file is missing"
              exit 1
            fi
          done

  # Emergency bypass check (Phase 1 feature)
  emergency-bypass:
    name: Emergency Bypass Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Check for emergency bypass
        run: |
          # Check if this is an emergency bypass by maintainer
          if [[ "${{ github.event.pull_request.user.login }}" == "tommihip" ]] && \
             [[ "${{ github.event.pull_request.title }}" =~ ^\[EMERGENCY\] ]]; then
            echo "Emergency bypass detected for maintainer"
            echo "This bypasses normal protection rules for critical fixes"
            echo "See CONTRIBUTING.md for emergency procedures"
          fi

  # Final validation (Phase 1 - basic checks only)
  final-validation:
    name: Final Validation
    runs-on: ubuntu-latest
    needs: [security, dependency-check, code-quality, proto-validation, docs-check, emergency-bypass]
    if: always()
    steps:
      - name: Check all jobs
        run: |
          # Check if all required jobs passed (Phase 1 critical checks only)
          if [ "${{ needs.security.result }}" != "success" ] || \
             [ "${{ needs.dependency-check.result }}" != "success" ] || \
             [ "${{ needs.code-quality.result }}" != "success" ]; then
            echo "Critical checks failed. Pull request cannot be merged."
            echo "Phase 1: Single Maintainer - Basic protection rules active"
            echo "See CONTRIBUTING.md for governance evolution plan"
            exit 1
          fi
          
          echo "All Phase 1 branch protection checks passed!"
          echo "Current governance phase: Single Maintainer (Phase 1)"
          echo "Next phase: First Contributors (2-5 people) - See CONTRIBUTING.md" 